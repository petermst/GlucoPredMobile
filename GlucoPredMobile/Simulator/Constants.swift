//
//  Constants.swift
//  GlucoPred
//
//  Created by Vegard Seim Karstang on 28.07.2016.
//  Copyright Â© 2016 Prediktor Medical AS. All rights reserved.
//

import Foundation
import UIKit

class Constants {
    //State enum
    static let XGP      = 0
    static let XGT      = 1
    static let XI       = 2
    static let XX       = 3
    static let XSR1     = 4
    static let XSR2     = 5
    static let XSS1     = 6
    static let XSS2     = 7
    static let XSTO     = 8
    static let XGUT     = 9
    static let XH       = 10
    static let XY       = 11
    static let XZ       = 12
    static let XLG      = 13
    static let nStates  = 14
    
    static let stateEnumFromName = ["Gp": XGP,
                                    "Gt": XGT,
                                    "I": XI,
                                    "X": XX,
                                    "SR1": XSR1,
                                    "SR2": XSR2,
                                    "SS1": XSS1,
                                    "SS2": XSS2,
                                    "Sto": XSTO,
                                    "Gut": XGUT,
                                    "H": XH,
                                    "Mlg": XLG,
                                    "Y": XY,
                                    "Z": XZ]
    
    static let stateLongName = ["Plasma glucose",
                                "Measured glucose",
                                "Plasma insulin",
                                "Remote insulin",
                                "Rapid insulin, comp1",
                                "Rapid insulin, comp2",
                                "Slow insulin, comp1",
                                "Slow insulin, comp2",
                                "Stomach content",
                                "Gut content",
                                "Glucagon",
                                "Liver glycogen",
                                "Dynamic exercise var",
                                "Exercise memory var"]
    
    static let stateUnits = ["mmol/L", "mmol/L", "mU/L", "U/L", "g", "pg/ml", ""]
    
    static let plotStatesByRow = [["Gp"], ["Gp", "Gt"], ["I", "X"], ["SR1", "SR2", "SS1", "SS2"], ["Sto", "Gut", "Mlg"], ["H"], ["Y", "Z"]]
    
    static let plottingChoices = ["Plasma glucose", "Glucose", "Internal insulin", "External insulin", "Digest glucose and liver glycogen", "Glucagon in plasma", "Exercise"]
    static let plotColors = [UIColor.red, UIColor.blue, UIColor.green, UIColor.yellow, UIColor.brown]
    static let defPlotLimits = [[3, 10], [3, 10], [0, 100], [0, 10], [0, 100], [100, 170], [0, 1]]
    //Glucose unit conversion from mmol/L to mg/dL
    static let GLUCOSEUNITCONVFACTOR = 18.0
    static let placketBurman44: [[Int]] = [
        [
            1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1
        ],
        [
            1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1
        ],
        [
            -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1
        ],
        [
            -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1
        ],
        [
            1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1
        ],
        [
            -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1
        ],
        [
            1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1
        ],
        [
            -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1
        ],
        [
            -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1
        ],
        [
            1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1
        ],
        [
            1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1
        ],
        [
            1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1
        ],
        [
            -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1
        ],
        [
            1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1
        ],
        [
            1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1
        ],
        [
            1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1
        ],
        [
            1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1
        ],
        [
            1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1
        ],
        [
            -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1
        ],
        [
            -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1
        ],
        [
            -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1
        ],
        [
            1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1
        ],
        [
            -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1
        ],
        [
            1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1
        ],
        [
            1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1
        ],
        [
            1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1
        ],
        [
            -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1
        ],
        [
            -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1
        ],
        [
            -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1
        ],
        [
            -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1
        ],
        [
            -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1
        ],
        [
            1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1
        ],
        [
            -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1
        ],
        [
            -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1
        ],
        [
            -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1
        ],
        [
            1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1
        ],
        [
            1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1
        ],
        [
            -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1
        ],
        [
            1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1
        ],
        [
            -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1
        ],
        [
            1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1
        ],
        [
            1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1, -1
        ],
        [
            -1,  1,  1, -1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1
        ],
        [
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
        ]
    ]
    
    //Math
    static let MISSING = -1.0e14
    
}

